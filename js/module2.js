// module2.js

// Таким образом мы можем получить
// доступ к этой функциональности
// в другом модуле через импорт:
import { sum } from "./module1.js";

console.log(sum(3, 2));

// Точно так же, мы можем импортировать и константы:
import { user, books } from "./module1.js";
console.log(user, books);

// Обратите внимание, что перечисляя названия
// при импорте через запятую, можно в одном
// импорте получить доступ сразу к нескольким
// переменным или функциям.

// Если вдруг мы хотим изменить имя той функции
// или переменной, которую импортируем,
// мы можем использовать ключевое слово as:

import { user2 as admin } from "./module1.js";

// console.log(user2); //Ошибка!
console.log(admin);

// Это также работает и со множественным импортом:
import { books as library, SOME_SETTINGS_FLAG as turnedOn } from "./module1.js";
console.log(library);

// Экспортировать функциональность можно также
// и уже после того, как она определена:
const user2 = {};
export { user2 };

// Это иногда бывает полезно, если мы хотим
// описать все экспорты в конце файла.

// Кроме того, это же помогает изменять названия при экспорте.
// Например, если
const user3 = {};
export { user3 as admin2 };

// multiple

// При импорте такой функциональности в другом модуле
// нам уже не требуется использовать {}.
import multiple from "./module1.js";
console.log(multiple(4, 2));
// Более того, мы сразу можем использовать другое имя при импорте:
import multiplicator from "./module1.js";
console.log(multiplicator(3, 4));
